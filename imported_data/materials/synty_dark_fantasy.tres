[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://dxct617ondkne"]

[ext_resource type="Texture2D" uid="uid://cpy4khdjm1pgx" path="res://imported_data/textures/albedo/PolygonDarkFantasy_Texture_01_A.png" id="1_0te1k"]
[ext_resource type="Texture2D" uid="uid://dhm8ab75attcl" path="res://imported_data/textures/emissive/PolygonDarkFantasy_Emissive_01_A.png" id="2_wksnv"]

[sub_resource type="Shader" id="Shader_0te1k"]
code = "shader_type spatial;

//stencil_mode read, 1, compare_not_equal;
render_mode depth_prepass_alpha, depth_draw_always, blend_premul_alpha, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	vec3 emission_tex = texture(texture_emission, base_uv).rgb;
	EMISSION = (emission.rgb + emission_tex) * emission_energy;
}"

[resource]
render_priority = 0
shader = SubResource("Shader_0te1k")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("1_0te1k")
shader_parameter/albedo_texture_size = Vector2i(4096, 4096)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_emission = ExtResource("2_wksnv")
shader_parameter/emission = Color(0, 0, 0, 1)
shader_parameter/emission_energy = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
